{"cells":[{"cell_type":"markdown","metadata":{"id":"4pCqQmbSXNwE"},"source":["# 최 하단부 plt에 한국어 표시하기 위한 부분"]},{"cell_type":"code","execution_count":1,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":8534,"status":"ok","timestamp":1669623391651,"user":{"displayName":"통신2조","userId":"05511036214781799110"},"user_tz":-540},"id":"Lm43ia-8ZeNF","outputId":"14acaf48-ae7b-4e3a-95fa-fc73596f34e6"},"outputs":[{"output_type":"stream","name":"stdout","text":["Reading package lists... Done\n","Building dependency tree       \n","Reading state information... Done\n","The following package was automatically installed and is no longer required:\n","  libnvidia-common-460\n","Use 'sudo apt autoremove' to remove it.\n","The following NEW packages will be installed:\n","  fonts-nanum\n","0 upgraded, 1 newly installed, 0 to remove and 5 not upgraded.\n","Need to get 9,604 kB of archives.\n","After this operation, 29.5 MB of additional disk space will be used.\n","Get:1 http://archive.ubuntu.com/ubuntu bionic/universe amd64 fonts-nanum all 20170925-1 [9,604 kB]\n","Fetched 9,604 kB in 1s (10.3 MB/s)\n","debconf: unable to initialize frontend: Dialog\n","debconf: (No usable dialog-like program is installed, so the dialog based frontend cannot be used. at /usr/share/perl5/Debconf/FrontEnd/Dialog.pm line 76, <> line 1.)\n","debconf: falling back to frontend: Readline\n","debconf: unable to initialize frontend: Readline\n","debconf: (This frontend requires a controlling tty.)\n","debconf: falling back to frontend: Teletype\n","dpkg-preconfigure: unable to re-open stdin: \n","Selecting previously unselected package fonts-nanum.\n","(Reading database ... 123991 files and directories currently installed.)\n","Preparing to unpack .../fonts-nanum_20170925-1_all.deb ...\n","Unpacking fonts-nanum (20170925-1) ...\n","Setting up fonts-nanum (20170925-1) ...\n","Processing triggers for fontconfig (2.12.6-0ubuntu2) ...\n","/usr/share/fonts: caching, new cache contents: 0 fonts, 1 dirs\n","/usr/share/fonts/truetype: caching, new cache contents: 0 fonts, 3 dirs\n","/usr/share/fonts/truetype/humor-sans: caching, new cache contents: 1 fonts, 0 dirs\n","/usr/share/fonts/truetype/liberation: caching, new cache contents: 16 fonts, 0 dirs\n","/usr/share/fonts/truetype/nanum: caching, new cache contents: 10 fonts, 0 dirs\n","/usr/local/share/fonts: caching, new cache contents: 0 fonts, 0 dirs\n","/root/.local/share/fonts: skipping, no such directory\n","/root/.fonts: skipping, no such directory\n","/var/cache/fontconfig: cleaning cache directory\n","/root/.cache/fontconfig: not cleaning non-existent cache directory\n","/root/.fontconfig: not cleaning non-existent cache directory\n","fc-cache: succeeded\n"]}],"source":["# 단계 1: 폰트 설치\n","\n","!sudo apt-get install -y fonts-nanum\n","!sudo fc-cache -fv\n","!rm ~/.cache/matplotlib -rf"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"MeGF5dnmXUWv"},"outputs":[],"source":["# 단계 2: 런타임 재시작\n","import os\n","os.kill(os.getpid(), 9)"]},{"cell_type":"code","execution_count":1,"metadata":{"id":"a0omxSr5XVyY","executionInfo":{"status":"ok","timestamp":1669623403939,"user_tz":-540,"elapsed":268,"user":{"displayName":"통신2조","userId":"05511036214781799110"}}},"outputs":[],"source":["# 단계 3: 한글 폰트 설정\n","import matplotlib.pyplot as plt\n","import matplotlib as mpl\n","import matplotlib.font_manager as fm\n","\n","# 마이너스 표시 문제\n","mpl.rcParams['axes.unicode_minus'] = False\n","\t\n","# 폰트 적용\n","plt.rc('font', family='NanumBarunGothic') "]},{"cell_type":"markdown","metadata":{"id":"nnMckGaiBnHX"},"source":["# 마운트, 기본 피쳐 불러오기"]},{"cell_type":"code","execution_count":2,"metadata":{"id":"UoeE-julPFOU","executionInfo":{"status":"ok","timestamp":1669623422943,"user_tz":-540,"elapsed":1788,"user":{"displayName":"통신2조","userId":"05511036214781799110"}}},"outputs":[],"source":["# df_mecab_adj의 클러스터링\n","\n","import pandas as pd\n","\n","from sklearn.feature_extraction.text import TfidfVectorizer\n","from sklearn.cluster import KMeans\n","from sklearn.metrics import adjusted_rand_score"]},{"cell_type":"code","execution_count":3,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":23610,"status":"ok","timestamp":1669623466892,"user":{"displayName":"통신2조","userId":"05511036214781799110"},"user_tz":-540},"id":"vFG07TxgPLQB","outputId":"f6640174-cc99-409d-b6a8-7857418560fb"},"outputs":[{"output_type":"stream","name":"stdout","text":["Mounted at /content/drive\n"]}],"source":["from google.colab import drive\n","drive.mount('/content/drive')"]},{"cell_type":"markdown","metadata":{"id":"sgeR_ZkdeSQs"},"source":["# 전처리 시작"]},{"cell_type":"code","execution_count":4,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":206},"executionInfo":{"elapsed":3195,"status":"ok","timestamp":1669623477140,"user":{"displayName":"통신2조","userId":"05511036214781799110"},"user_tz":-540},"id":"a3yrIKAwPFOX","outputId":"5127dc41-7172-4baf-a48e-c0931f2f9512"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["         keyword                                         mecab_adj2\n","0          168계단     있다      없다      있다      없다      비싸다      멀다...\n","1          25의용단     좋다      없다      없다      없다      없다      같다 ...\n","2       40계단 문화관     늦다      좋다      좋다      없다      같다      비싸다...\n","3  40계단 문화관광테마거리     수많다      있다      없다      없다      없다      있다...\n","4     60년전통 할매국밥     맛있다      없다      싫다      없다      맛있다      좋..."],"text/html":["\n","  <div id=\"df-a65a33af-7919-4f90-a31f-e2ea8ebe4a46\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>keyword</th>\n","      <th>mecab_adj2</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>168계단</td>\n","      <td>있다      없다      있다      없다      비싸다      멀다...</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>25의용단</td>\n","      <td>좋다      없다      없다      없다      없다      같다 ...</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>40계단 문화관</td>\n","      <td>늦다      좋다      좋다      없다      같다      비싸다...</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>40계단 문화관광테마거리</td>\n","      <td>수많다      있다      없다      없다      없다      있다...</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>60년전통 할매국밥</td>\n","      <td>맛있다      없다      싫다      없다      맛있다      좋...</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-a65a33af-7919-4f90-a31f-e2ea8ebe4a46')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-a65a33af-7919-4f90-a31f-e2ea8ebe4a46 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-a65a33af-7919-4f90-a31f-e2ea8ebe4a46');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":4}],"source":["# 데이터 불러오기\n","\n","df_mecab_adj = pd.read_csv('/content/drive/MyDrive/Data/Preprocessing/mecab_adj_total.csv', encoding='utf-8')\n","\n","df_mecab_adj.head()\n"]},{"cell_type":"code","execution_count":5,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":206},"executionInfo":{"elapsed":277,"status":"ok","timestamp":1669623481835,"user":{"displayName":"통신2조","userId":"05511036214781799110"},"user_tz":-540},"id":"Mc4Njh91hvPi","outputId":"fd8bba23-ee51-4b84-ba2d-418929b8bfd2"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["         keyword                                          mecab_adj\n","0          168계단     있다      없다      있다      없다      비싸다      멀다...\n","1          25의용단     좋다      없다      없다      없다      없다      같다 ...\n","2       40계단 문화관     늦다      좋다      좋다      없다      같다      비싸다...\n","3  40계단 문화관광테마거리     수많다      있다      없다      없다      없다      있다...\n","4     60년전통 할매국밥     맛있다      없다      싫다      없다      맛있다      좋..."],"text/html":["\n","  <div id=\"df-29d85af3-5c07-439e-974f-982746b5380a\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>keyword</th>\n","      <th>mecab_adj</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>168계단</td>\n","      <td>있다      없다      있다      없다      비싸다      멀다...</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>25의용단</td>\n","      <td>좋다      없다      없다      없다      없다      같다 ...</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>40계단 문화관</td>\n","      <td>늦다      좋다      좋다      없다      같다      비싸다...</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>40계단 문화관광테마거리</td>\n","      <td>수많다      있다      없다      없다      없다      있다...</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>60년전통 할매국밥</td>\n","      <td>맛있다      없다      싫다      없다      맛있다      좋...</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-29d85af3-5c07-439e-974f-982746b5380a')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-29d85af3-5c07-439e-974f-982746b5380a button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-29d85af3-5c07-439e-974f-982746b5380a');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":5}],"source":["# mecab_adj2 컬럼을 mecab_adj로 변경하고 덮어쓰기\n","\n","df_mecab_adj = df_mecab_adj.rename(columns={'mecab_adj2':'mecab_adj'})\n","df_mecab_adj.head()\n","\n"]},{"cell_type":"code","execution_count":6,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":242},"executionInfo":{"elapsed":828,"status":"ok","timestamp":1669623527294,"user":{"displayName":"통신2조","userId":"05511036214781799110"},"user_tz":-540},"id":"YHwZNt9pPFOX","outputId":"36e7d67d-bd22-47d5-94c6-4be7705eeef9"},"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:1: FutureWarning: The default value of regex will change from True to False in a future version.\n","  \"\"\"Entry point for launching an IPython kernel.\n"]},{"output_type":"execute_result","data":{"text/plain":["         keyword                                          mecab_adj\n","0          168계단     있다      없다      있다      없다      비싸다      멀다...\n","1          25의용단     좋다      없다      없다      없다      없다      같다 ...\n","2       40계단 문화관     늦다      좋다      좋다      없다      같다      비싸다...\n","3  40계단 문화관광테마거리     수많다      있다      없다      없다      없다      있다...\n","4     60년전통 할매국밥     맛있다      없다      싫다      없다      맛있다      좋..."],"text/html":["\n","  <div id=\"df-b4c5d3b9-8a31-49a5-b366-bc2fb5bb0371\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>keyword</th>\n","      <th>mecab_adj</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>168계단</td>\n","      <td>있다      없다      있다      없다      비싸다      멀다...</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>25의용단</td>\n","      <td>좋다      없다      없다      없다      없다      같다 ...</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>40계단 문화관</td>\n","      <td>늦다      좋다      좋다      없다      같다      비싸다...</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>40계단 문화관광테마거리</td>\n","      <td>수많다      있다      없다      없다      없다      있다...</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>60년전통 할매국밥</td>\n","      <td>맛있다      없다      싫다      없다      맛있다      좋...</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-b4c5d3b9-8a31-49a5-b366-bc2fb5bb0371')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-b4c5d3b9-8a31-49a5-b366-bc2fb5bb0371 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-b4c5d3b9-8a31-49a5-b366-bc2fb5bb0371');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":6}],"source":["df_mecab_adj['mecab_adj'] = df_mecab_adj['mecab_adj'].str.replace('[^ㄱ-ㅎㅏ-ㅣ가-힣 ]', '')\n","\n","df_mecab_adj.head()\n"]},{"cell_type":"code","execution_count":7,"metadata":{"id":"WoGVfzmBMKEn","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1669623538964,"user_tz":-540,"elapsed":7665,"user":{"displayName":"통신2조","userId":"05511036214781799110"}},"outputId":"d2ace8b7-5fbb-426b-d315-4fdd49be3bec"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["[('좋다', 401855),\n"," ('있다', 259370),\n"," ('같다', 250260),\n"," ('없다', 219411),\n"," ('많다', 195274),\n"," ('맛있다', 128110),\n"," ('작다', 33444),\n"," ('예쁘다', 31704),\n"," ('넓다', 28998),\n"," ('크다', 27462),\n"," ('높다', 25286),\n"," ('괜찮다', 25141),\n"," ('힘들다', 23610),\n"," ('재밌다', 20421),\n"," ('길다', 19236),\n"," ('아쉽다', 17562),\n"," ('늦다', 17366),\n"," ('편하다', 15656),\n"," ('이쁘다', 15283),\n"," ('그렇다', 14933),\n"," ('맑다', 14893),\n"," ('짧다', 14398),\n"," ('다', 12818),\n"," ('쉽다', 12477),\n"," ('르다', 12097),\n"," ('귀엽다', 11132),\n"," ('싫다', 10689),\n"," ('빠르다', 9732),\n"," ('적다', 9146),\n"," ('재미있다', 8903),\n"," ('멀다', 8744),\n"," ('멋있다', 8209),\n"," ('덥다', 7993),\n"," ('멋지다', 7794),\n"," ('좁다', 7607),\n"," ('아름답다', 7602),\n"," ('깊다', 7366),\n"," ('알차다', 7070),\n"," ('가볍다', 6879),\n"," ('어렵다', 6740),\n"," ('비싸다', 6597),\n"," ('즐겁다', 6020),\n"," ('무섭다', 5906),\n"," ('밝다', 5743),\n"," ('가깝다', 5728),\n"," ('낮다', 4974),\n"," ('야무지다', 4946),\n"," ('젊다', 4646),\n"," ('급하다', 4606),\n"," ('나쁘다', 4555),\n"," ('엄청나다', 4332),\n"," ('귀찮다', 4308),\n"," ('춥다', 4094),\n"," ('똑같다', 4079),\n"," ('새롭다', 4060),\n"," ('부드럽다', 3920),\n"," ('맛나다', 3768),\n"," ('수많다', 3742),\n"," ('붉다', 3561),\n"," ('아프다', 3125),\n"," ('바쁘다', 3033),\n"," ('싸다', 2904),\n"," ('이렇다', 2856),\n"," ('얇다', 2783),\n"," ('심하다', 2435),\n"," ('맛없다', 2406),\n"," ('흐리다', 2345),\n"," ('고맙다', 2335),\n"," ('반갑다', 2277),\n"," ('지나치다', 2250),\n"," ('세다', 2221),\n"," ('아깝다', 2211),\n"," ('저렇다', 2111),\n"," ('부럽다', 2102),\n"," ('맵다', 2080),\n"," ('강하다', 2026),\n"," ('검다', 1977),\n"," ('어떻다', 1846),\n"," ('낫다', 1728),\n"," ('뜨겁다', 1640),\n"," ('배부르다', 1617),\n"," ('진하다', 1549),\n"," ('낡다', 1427),\n"," ('느리다', 1424),\n"," ('고프다', 1389),\n"," ('드넓다', 1349),\n"," ('짙다', 1271),\n"," ('고르다', 1241),\n"," ('힘드다', 1219),\n"," ('푸르다', 1203),\n"," ('가파르다', 1191),\n"," ('어둡다', 1191),\n"," ('나다', 1173),\n"," ('놀랍다', 1145),\n"," ('얕다', 1120),\n"," ('파랗다', 1114),\n"," ('뒤늦다', 1114),\n"," ('예뿌다', 1079),\n"," ('쎄다', 1048),\n"," ('안타깝다', 1039),\n"," ('어이없다', 1038),\n"," ('굳다', 1033),\n"," ('상관없다', 1028),\n"," ('시끄럽다', 1018),\n"," ('굵다', 983),\n"," ('곱다', 927),\n"," ('습하다', 925),\n"," ('낯설다', 925),\n"," ('정신없다', 891),\n"," ('하얗다', 890),\n"," ('무겁다', 879),\n"," ('아쉬우다', 858),\n"," ('조다', 857),\n"," ('슬프다', 855),\n"," ('착하다', 852),\n"," ('색다르다', 838),\n"," ('빡세다', 797),\n"," ('알맞다', 789),\n"," ('차갑다', 774),\n"," ('옳다', 747),\n"," ('죠다', 742),\n"," ('흔하다', 734),\n"," ('걸맞다', 728),\n"," ('그립다', 716),\n"," ('못지않다', 712),\n"," ('겉다', 682),\n"," ('드물다', 628),\n"," ('기쁘다', 623),\n"," ('노랗다', 613),\n"," ('환하다', 609),\n"," ('잘다', 609),\n"," ('묘하다', 609),\n"," ('정겹다', 605),\n"," ('아무렇다', 598),\n"," ('차다', 595),\n"," ('비리다', 588),\n"," ('빨갛다', 576),\n"," ('더우다', 572),\n"," ('뜻깊다', 570),\n"," ('인상깊다', 566),\n"," ('부끄럽다', 566),\n"," ('귀여우다', 554),\n"," ('배고프다', 551),\n"," ('갓다', 548),\n"," ('힘차다', 520),\n"," ('재미없다', 517),\n"," ('가까우다', 514),\n"," ('두껍다', 503),\n"," ('거칠다', 503),\n"," ('눈부시다', 502),\n"," ('약하다', 488),\n"," ('찹다', 487),\n"," ('외롭다', 486),\n"," ('과하다', 475),\n"," ('지겹다', 471),\n"," ('희다', 470),\n"," ('질기다', 467),\n"," ('앙증맞다', 457),\n"," ('찐하다', 432),\n"," ('뿌옇다', 430),\n"," ('잦다', 430),\n"," ('뛰어나다', 426),\n"," ('어딨다', 421),\n"," ('어지럽다', 417),\n"," ('더럽다', 412),\n"," ('갑작스럽다', 401),\n"," ('틀림없다', 393),\n"," ('어려우다', 384),\n"," ('귀하다', 379),\n"," ('힘겹다', 379),\n"," ('오래다', 378),\n"," ('동그랗다', 377),\n"," ('안녕하다', 359),\n"," ('손쉽다', 354),\n"," ('실하다', 351),\n"," ('비좁다', 348),\n"," ('어리다', 337),\n"," ('시다', 335),\n"," ('웁다', 329),\n"," ('세차다', 328),\n"," ('해맑다', 317),\n"," ('름없다', 313),\n"," ('활기차다', 310),\n"," ('뜨다', 309),\n"," ('잽싸다', 304),\n"," ('재빠르다', 304),\n"," ('섭하다', 302),\n"," ('둥글다', 295),\n"," ('재미나다', 295),\n"," ('흐드러지다', 290),\n"," ('조그맣다', 288),\n"," ('하찮다', 285),\n"," ('쓸데없다', 285),\n"," ('싱겁다', 283),\n"," ('까맣다', 279),\n"," ('연하다', 279),\n"," ('험하다', 278),\n"," ('뜬금없다', 275),\n"," ('수줍다', 271),\n"," ('거세다', 268),\n"," ('옅다', 267),\n"," ('무지하다', 267),\n"," ('기름지다', 263),\n"," ('남다르다', 262),\n"," ('궂다', 249),\n"," ('두렵다', 247),\n"," ('손색없다', 245),\n"," ('쩔다', 241),\n"," ('커다랗다', 241),\n"," ('어떠다', 239),\n"," ('덜하다', 233),\n"," ('스럽다', 229),\n"," ('오지다', 227),\n"," ('틀리다', 226),\n"," ('따갑다', 222),\n"," ('설다', 221),\n"," ('습지다', 217),\n"," ('추우다', 215),\n"," ('징그럽다', 215),\n"," ('어리석다', 213),\n"," ('친하다', 212),\n"," ('없다다', 208),\n"," ('폭넓다', 205),\n"," ('구리다', 204),\n"," ('촌스럽다', 202),\n"," ('뽀얗다', 197),\n"," ('사이좋다', 193),\n"," ('곧다', 190),\n"," ('존다', 189),\n"," ('무서우다', 188),\n"," ('슴슴하다', 187),\n"," ('구다', 187),\n"," ('심심찮다', 185),\n"," ('우연찮다', 184),\n"," ('밭다', 184),\n"," ('순하다', 183),\n"," ('끊임없다', 182),\n"," ('그지없다', 179),\n"," ('덩그러다', 178),\n"," ('싶다', 178),\n"," ('싱그럽다', 173),\n"," ('저리다', 173),\n"," ('따숩다', 173),\n"," ('옥다', 166),\n"," ('묽다', 166),\n"," ('바르다', 165),\n"," ('예뻤다', 164),\n"," ('우습다', 163),\n"," ('괴롭다', 163),\n"," ('속상하다', 161),\n"," ('까다롭다', 160),\n"," ('밤늦다', 156),\n"," ('아름다우다', 156),\n"," ('변함없다', 155),\n"," ('뜨거우다', 153),\n"," ('거하다', 151),\n"," ('기차다', 150),\n"," ('쨍하다', 149),\n"," ('시리다', 149),\n"," ('가늘다', 149),\n"," ('휑하다', 148),\n"," ('드럽다', 142),\n"," ('빡시다', 136),\n"," ('미끄럽다', 134),\n"," ('부드러우다', 134),\n"," ('번거롭다', 130),\n"," ('안쓰럽다', 130),\n"," ('드세다', 130),\n"," ('짠하다', 126),\n"," ('어설프다', 123),\n"," ('무덥다', 121),\n"," ('굳세다', 121),\n"," ('빼어나다', 120),\n"," ('머다', 118),\n"," ('뻔하다', 115),\n"," ('넒다', 115),\n"," ('머지않다', 114),\n"," ('읎다', 114),\n"," ('고되다', 113),\n"," ('경이롭다', 113),\n"," ('아까우다', 111),\n"," ('파라다', 105),\n"," ('매섭다', 104),\n"," ('푸르르다', 104),\n"," ('보드랍다', 103),\n"," ('밉다', 102),\n"," ('박하다', 102),\n"," ('대차다', 102),\n"," ('문제없다', 101),\n"," ('쓸모없다', 101),\n"," ('낯익다', 98),\n"," ('매끄럽다', 97),\n"," ('벅차다', 95),\n"," ('훤하다', 94),\n"," ('이롭다', 94),\n"," ('서럽다', 93),\n"," ('단촐하다', 90),\n"," ('생뚱맞다', 89),\n"," ('흥겹다', 87),\n"," ('따시다', 87),\n"," ('올바르다', 87),\n"," ('자리다', 86),\n"," ('언짢다', 85),\n"," ('게으르다', 85),\n"," ('정답다', 85),\n"," ('얼큰하다', 84),\n"," ('누리다', 84),\n"," ('소용없다', 84),\n"," ('요렇다', 82),\n"," ('야하다', 80),\n"," ('사납다', 80),\n"," ('부끄러우다', 80),\n"," ('놉다', 80),\n"," ('즐거다', 79),\n"," ('자그맣다', 79),\n"," ('철없다', 79),\n"," ('미우다', 77),\n"," ('넓디넓다', 76),\n"," ('적잖다', 74),\n"," ('깜다', 73),\n"," ('아푸다', 73),\n"," ('무르다', 73),\n"," ('감명깊다', 72),\n"," ('까지다', 69),\n"," ('후하다', 69),\n"," ('짜다', 69),\n"," ('부시다', 69),\n"," ('호되다', 68),\n"," ('간지럽다', 68),\n"," ('더디다', 67),\n"," ('버겁다', 67),\n"," ('야물딱지다', 65),\n"," ('누렇다', 65),\n"," ('대수롭다', 65),\n"," ('어두우다', 64),\n"," ('떫다', 63),\n"," ('지겨우다', 62),\n"," ('눅다', 62),\n"," ('달갑다', 61),\n"," ('새까맣다', 61),\n"," ('만만찮다', 61),\n"," ('여깄다', 60),\n"," ('거침없다', 60),\n"," ('족하다', 60),\n"," ('격하다', 60),\n"," ('서툴다', 60),\n"," ('기똥차다', 60),\n"," ('씨다', 59),\n"," ('헛되다', 58),\n"," ('줄기차다', 58),\n"," ('시커멓다', 58),\n"," ('굴뚝같다', 58),\n"," ('멋들어지다', 58),\n"," ('우하다', 57),\n"," ('냅다', 57),\n"," ('날카롭다', 57),\n"," ('어마다', 56),\n"," ('우렁차다', 56),\n"," ('그럴싸하다', 56),\n"," ('끈질기다', 55),\n"," ('재다', 55),\n"," ('점잖다', 54),\n"," ('지대다', 53),\n"," ('억세다', 53),\n"," ('달큰하다', 53),\n"," ('관계없다', 53),\n"," ('터무니없다', 53),\n"," ('살갑다', 53),\n"," ('새파랗다', 52),\n"," ('벌겋다', 51),\n"," ('만다', 50),\n"," ('시답다', 50),\n"," ('구지다', 50),\n"," ('업다', 48),\n"," ('검붉다', 48),\n"," ('값싸다', 48),\n"," ('빡쎄다', 48),\n"," ('유례없다', 47),\n"," ('기막히다', 47),\n"," ('드높다', 46),\n"," ('찰지다', 46),\n"," ('보람차다', 46),\n"," ('값지다', 46),\n"," ('지리다', 45),\n"," ('글다', 45),\n"," ('칩다', 45),\n"," ('뼈저리다', 45),\n"," ('기다', 45),\n"," ('옴팡지다', 45),\n"," ('덧없다', 44),\n"," ('두텁다', 44),\n"," ('둥그렇다', 44),\n"," ('뜻있다', 44),\n"," ('숱하다', 44),\n"," ('어떻하다', 44),\n"," ('무거우다', 44),\n"," ('낄다', 44),\n"," ('형편없다', 43),\n"," ('영락없다', 43),\n"," ('이채롭다', 43),\n"," ('해롭다', 43),\n"," ('부질없다', 43),\n"," ('어림없다', 43),\n"," ('가쁘다', 43),\n"," ('즐거우다', 43),\n"," ('옛스럽다', 42),\n"," ('새하얗다', 42),\n"," ('특출나다', 42),\n"," ('엷다', 41),\n"," ('외지다', 41),\n"," ('독하다', 40),\n"," ('용하다', 40),\n"," ('볼품없다', 40),\n"," ('주옥같다', 40),\n"," ('좁디좁다', 39),\n"," ('유별나다', 39),\n"," ('멋쩍다', 38),\n"," ('발다', 38),\n"," ('차가우다', 38),\n"," ('얄밉다', 38),\n"," ('감질나다', 38),\n"," ('재수없다', 38),\n"," ('선하다', 38),\n"," ('새빨갛다', 38),\n"," ('짓궂다', 37),\n"," ('미끄러우다', 37),\n"," ('얄궂다', 37),\n"," ('천하다', 37),\n"," ('주의깊다', 37),\n"," ('성싶다', 36),\n"," ('힘없다', 36),\n"," ('서글프다', 36),\n"," ('쌔다', 35),\n"," ('더리다', 35),\n"," ('아름다다', 35),\n"," ('가벼우다', 34),\n"," ('두드러지다', 34),\n"," ('당차다', 34),\n"," ('가렵다', 34),\n"," ('외다', 34),\n"," ('짝다', 33),\n"," ('길다랗다', 33),\n"," ('나뿌다', 33),\n"," ('장하다', 32),\n"," ('시뻘겋다', 32),\n"," ('쫀쫀하다', 32),\n"," ('배다', 32),\n"," ('부러우다', 32),\n"," ('의롭다', 32),\n"," ('잘나다', 31),\n"," ('청승맞다', 31),\n"," ('시렵다', 31),\n"," ('쉬우다', 31),\n"," ('시원찮다', 31),\n"," ('쓸모있다', 30),\n"," ('망하다', 30),\n"," ('겹다', 30),\n"," ('숨차다', 30),\n"," ('목마르다', 30),\n"," ('얄짤없다', 30),\n"," ('고마우다', 30),\n"," ('아낌없다', 30),\n"," ('슬푸다', 30),\n"," ('따스다', 29),\n"," ('여리다', 29),\n"," ('올곧다', 28),\n"," ('기다랗다', 28),\n"," ('무디다', 28),\n"," ('가물다', 28),\n"," ('바뿌다', 28),\n"," ('쑥스럽다', 28),\n"," ('시퍼렇다', 28),\n"," ('우중충하다', 27),\n"," ('약다', 27),\n"," ('가열차다', 27),\n"," ('잇다', 27),\n"," ('흉하다', 27),\n"," ('가엾다', 27),\n"," ('추다', 27),\n"," ('마땅찮다', 26),\n"," ('쓰리다', 26),\n"," ('미심쩍다', 26),\n"," ('그만이다', 25),\n"," ('애꿎다', 25),\n"," ('의좋다', 25),\n"," ('구찮다', 25),\n"," ('증하다', 25),\n"," ('추하다', 25),\n"," ('아리다', 24),\n"," ('허옇다', 24),\n"," ('귀찬다', 24),\n"," ('애처롭다', 24),\n"," ('맑디맑다', 23),\n"," ('차지다', 23),\n"," ('어여쁘다', 23),\n"," ('민하다', 23),\n"," ('끝없다', 23),\n"," ('그릏다', 23),\n"," ('작디작다', 23),\n"," ('질다', 23),\n"," ('매우다', 22),\n"," ('번거로우다', 22),\n"," ('어처구니없다', 22),\n"," ('성하다', 22),\n"," ('너그럽다', 22),\n"," ('높다랗다', 22),\n"," ('난데없다', 22),\n"," ('뻘겋다', 22),\n"," ('찡하다', 21),\n"," ('탁하다', 21),\n"," ('쪼그맣다', 21),\n"," ('욱다', 21),\n"," ('에리다', 20),\n"," ('지긋지긋하다', 20),\n"," ('시덥잖다', 20),\n"," ('가느다랗다', 20),\n"," ('똥그랗다', 20),\n"," ('쑥쓰럽다', 19),\n"," ('감쪽같다', 19),\n"," ('가느다', 19),\n"," ('널럴하다', 19),\n"," ('구성지다', 19),\n"," ('짧디짧다', 19),\n"," ('가없다', 19),\n"," ('남부럽다', 18),\n"," ('쪼끄맣다', 18),\n"," ('쎼다', 18),\n"," ('싱거우다', 18),\n"," ('헐벗다', 18),\n"," ('퍼렇다', 18),\n"," ('비탈지다', 18),\n"," ('뻔질나다', 18),\n"," ('삐뚤다', 18),\n"," ('멋없다', 17),\n"," ('역겹다', 17),\n"," ('두꺼우다', 17),\n"," ('간드러지다', 17),\n"," ('익다', 17),\n"," ('고파다', 17),\n"," ('후지다', 17),\n"," ('뜨근하다', 17),\n"," ('먹먹하다', 17),\n"," ('실없다', 17),\n"," ('역하다', 16),\n"," ('너르다', 16),\n"," ('샛노랗다', 16),\n"," ('시끄러우다', 16),\n"," ('높디높다', 16),\n"," ('푸지다', 16),\n"," ('메마르다', 16),\n"," ('캄캄하다', 16),\n"," ('찌뿌둥하다', 16),\n"," ('더러우다', 16),\n"," ('그러하다', 16),\n"," ('새카맣다', 16),\n"," ('어두다', 16),\n"," ('희망차다', 16),\n"," ('뿌리깊다', 16),\n"," ('끄떡없다', 15),\n"," ('참하다', 15),\n"," ('후덥다', 15),\n"," ('악하다', 15),\n"," ('주제넘다', 15),\n"," ('어지러우다', 15),\n"," ('수상쩍다', 15),\n"," ('빈틈없다', 15),\n"," ('같잖다', 15),\n"," ('네모나다', 15),\n"," ('젊잖다', 15),\n"," ('집지다', 15),\n"," ('식다', 14),\n"," ('실허다', 14),\n"," ('그리우다', 14),\n"," ('영하다', 14),\n"," ('고달프다', 14),\n"," ('능하다', 14),\n"," ('곤하다', 14),\n"," ('중하다', 14),\n"," ('특별나다', 14),\n"," ('새차다', 14),\n"," ('따사롭다', 14),\n"," ('짜잔하다', 14),\n"," ('미쁘다', 14),\n"," ('무시다', 14),\n"," ('모지다', 14),\n"," ('별하다', 13),\n"," ('발갛다', 13),\n"," ('심상찮다', 13),\n"," ('빠삭하다', 13),\n"," ('고우다', 13),\n"," ('어뜨다', 13),\n"," ('온데간데없다', 13),\n"," ('졸리다', 13),\n"," ('멋적다', 13),\n"," ('편찮다', 13),\n"," ('수집다', 13),\n"," ('동글다', 13),\n"," ('길고길다', 13),\n"," ('건방지다', 13),\n"," ('희뿌옇다', 13),\n"," ('어김없다', 12),\n"," ('짙푸르다', 12),\n"," ('까다로우다', 12),\n"," ('서투르다', 12),\n"," ('고푸다', 12),\n"," ('성스럽다', 12),\n"," ('두서없다', 12),\n"," ('꾸밈없다', 12),\n"," ('노오랗다', 12),\n"," ('헤프다', 12),\n"," ('쿨하다', 11),\n"," ('부여다', 11),\n"," ('가득차다', 11),\n"," ('답다', 11),\n"," ('고다', 11),\n"," ('엄하다', 11),\n"," ('마다', 11),\n"," ('버릇없다', 11),\n"," ('낯간지럽다', 11),\n"," ('못나다', 11),\n"," ('고렇다', 11),\n"," ('요상하다', 11),\n"," ('염하다', 11),\n"," ('어질다', 11),\n"," ('척하다', 10),\n"," ('좁다랗다', 10),\n"," ('새로우다', 10),\n"," ('징하다', 10),\n"," ('비뚤다', 10),\n"," ('심술궂다', 10),\n"," ('외로우다', 10),\n"," ('보잘것없다', 10),\n"," ('노르다', 10),\n"," ('두려우다', 10),\n"," ('꺼멓다', 10),\n"," ('말갛다', 10),\n"," ('땡그랗다', 10),\n"," ('파아랗다', 10),\n"," ('허하다', 9),\n"," ('웂다', 9),\n"," ('자다', 9),\n"," ('즐거웁다', 9),\n"," ('웃다', 9),\n"," ('뜨시다', 9),\n"," ('이릏다', 9),\n"," ('쿠리다', 9),\n"," ('개구지다', 9),\n"," ('저떻다', 9),\n"," ('넓다랗다', 9),\n"," ('성기다', 9),\n"," ('뿌여다', 9),\n"," ('깨달다', 9),\n"," ('숭하다', 8),\n"," ('밸라다', 8),\n"," ('어쭙잖다', 8),\n"," ('멀겋다', 8),\n"," ('누르다', 8),\n"," ('새초롬하다', 8),\n"," ('맛깔지다', 8),\n"," ('염치없다', 8),\n"," ('수없다', 8),\n"," ('이르다', 8),\n"," ('모질다', 8),\n"," ('옹골차다', 8),\n"," ('둥그다', 8),\n"," ('달디달다', 8),\n"," ('쌔까맣다', 8),\n"," ('눈물겹다', 8),\n"," ('물렁하다', 8),\n"," ('꿈같다', 8),\n"," ('동그라다', 8),\n"," ('놀라우다', 8),\n"," ('똑부러지다', 8),\n"," ('경사지다', 8),\n"," ('똑바르다', 8),\n"," ('불티나다', 8),\n"," ('끄덕없다', 8),\n"," ('복되다', 8),\n"," ('모자라다', 7),\n"," ('패다', 7),\n"," ('쌀쌀맞다', 7),\n"," ('해로우다', 7),\n"," ('어럽다', 7),\n"," ('기운차다', 7),\n"," ('억수같다', 7),\n"," ('빨가다', 7),\n"," ('횡하다', 7),\n"," ('뼈아프다', 7),\n"," ('얇디얇다', 7),\n"," ('한결같다', 7),\n"," ('어줍다', 7),\n"," ('꼴사납다', 7),\n"," ('시답잖다', 7),\n"," ('혹하다', 7),\n"," ('걸죽하다', 7),\n"," ('야물다', 7),\n"," ('걷다', 7),\n"," ('되다', 7),\n"," ('아파다', 7),\n"," ('날쌔다', 7),\n"," ('도드라지다', 7),\n"," ('아퍼다', 7),\n"," ('촌시럽다', 7),\n"," ('짖궂다', 7),\n"," ('한갓지다', 7),\n"," ('나긋나긋하다', 6),\n"," ('앙칼지다', 6),\n"," ('삐뚫다', 6),\n"," ('힘있다', 6),\n"," ('가벼웁다', 6),\n"," ('사나우다', 6),\n"," ('배리다', 6),\n"," ('애닯다', 6),\n"," ('남모르다', 6),\n"," ('분하다', 6),\n"," ('느닷없다', 6),\n"," ('엿같다', 6),\n"," ('둥굴다', 6),\n"," ('어줍잖다', 6),\n"," ('줄다', 6),\n"," ('메스껍다', 6),\n"," ('거추장스럽다', 6),\n"," ('매몰차다', 6),\n"," ('여럽다', 6),\n"," ('여유있다', 6),\n"," ('익살맞다', 6),\n"," ('마려우다', 6),\n"," ('랍다', 6),\n"," ('없잖다', 6),\n"," ('개르다', 6),\n"," ('때늦다', 6),\n"," ('고리다', 6),\n"," ('반가다', 6),\n"," ('단출하다', 6),\n"," ('안쓰러우다', 6),\n"," ('마렵다', 6),\n"," ('무하다', 6),\n"," ('추지다', 6),\n"," ('애달프다', 6),\n"," ('빤하다', 6),\n"," ('네모낳다', 6),\n"," ('참되다', 6),\n"," ('실답다', 6),\n"," ('막돼먹다', 6),\n"," ('가엽다', 6),\n"," ('좆같다', 6),\n"," ('개탄스럽다', 6),\n"," ('곱디곱다', 5),\n"," ('고풍스럽다', 5),\n"," ('많고많다', 5),\n"," ('마르다', 5),\n"," ('달르다', 5),\n"," ('못미덥다', 5),\n"," ('한량없다', 5),\n"," ('남짓하다', 5),\n"," ('듯하다', 5),\n"," ('틀지다', 5),\n"," ('족다', 5),\n"," ('탐스럽다', 5),\n"," ('무더우다', 5),\n"," ('비다', 5),\n"," ('그럿다', 5),\n"," ('갈데없다', 5),\n"," ('심들다', 5),\n"," ('부옇다', 5),\n"," ('어슬프다', 5),\n"," ('쬐그맣다', 5),\n"," ('승하다', 5),\n"," ('도지다', 5),\n"," ('앙하다', 5),\n"," ('능글맞다', 5),\n"," ('몽글다', 5),\n"," ('짙붉다', 5),\n"," ('그만하다', 5),\n"," ('저깄다', 5),\n"," ('편히다', 5),\n"," ('따가우다', 5),\n"," ('조그만하다', 5),\n"," ('못생기다', 5),\n"," ('조렇다', 5),\n"," ('몽총하다', 5),\n"," ('긴하다', 5),\n"," ('걸지다', 5),\n"," ('변변찮다', 5),\n"," ('방정맞다', 5),\n"," ('빨다', 5),\n"," ('단조롭다', 5),\n"," ('빨르다', 4),\n"," ('속되다', 4),\n"," ('케케묵다', 4),\n"," ('구슬프다', 4),\n"," ('이다', 4),\n"," ('날래다', 4),\n"," ('간데없다', 4),\n"," ('동떨어지다', 4),\n"," ('싸납다', 4),\n"," ('허물없다', 4),\n"," ('시꺼멓다', 4),\n"," ('허벌나다', 4),\n"," ('멀고멀다', 4),\n"," ('뽀오얗다', 4),\n"," ('못하다', 4),\n"," ('굼뜨다', 4),\n"," ('마디다', 4),\n"," ('그렁다', 4),\n"," ('믿음직스럽다', 4),\n"," ('빛바래다', 4),\n"," ('따습다', 4),\n"," ('가팔르다', 4),\n"," ('짜하다', 4),\n"," ('중허다', 4),\n"," ('머얼다', 4),\n"," ('저러다', 4),\n"," ('매스껍다', 4),\n"," ('지다', 4),\n"," ('아깝잖다', 4),\n"," ('가녀리다', 4),\n"," ('반감다', 4),\n"," ('즉다', 4),\n"," ('의심쩍다', 4),\n"," ('미덥다', 4),\n"," ('물리다', 4),\n"," ('힘쎄다', 4),\n"," ('진배없다', 4),\n"," ('앳되다', 4),\n"," ('모나다', 4),\n"," ('계면쩍다', 4),\n"," ('햇갈리다', 4),\n"," ('초롱초롱하다', 4),\n"," ('숨가쁘다', 4),\n"," ('만족스럽다', 4),\n"," ('궁상맞다', 4),\n"," ('꼬지다', 4),\n"," ('잘생기다', 4),\n"," ('험상궂다', 4),\n"," ('석연찮다', 4),\n"," ('동그렇다', 3),\n"," ('불만족스럽다', 3),\n"," ('붙다', 3),\n"," ('서투다', 3),\n"," ('그르다', 3),\n"," ('언덕지다', 3),\n"," ('쿰쿰하다', 3),\n"," ('둔하다', 3),\n"," ('괴로우다', 3),\n"," ('둏다', 3),\n"," ('부지다', 3),\n"," ('유하다', 3),\n"," ('우섭다', 3),\n"," ('볼썽사납다', 3),\n"," ('맹하다', 3),\n"," ('어떤다', 3),\n"," ('구석지다', 3),\n"," ('상되다', 3),\n"," ('었다', 3),\n"," ('보기좋다', 3),\n"," ('차겁다', 3),\n"," ('나섭다', 3),\n"," ('기다라다', 3),\n"," ('여물다', 3),\n"," ('외로다', 3),\n"," ('당당다', 3),\n"," ('궁하다', 3),\n"," ('칠칠맞다', 3),\n"," ('속절없다', 3),\n"," ('퍼러다', 3),\n"," ('섣부르다', 3),\n"," ('꾸지다', 3),\n"," ('곯다', 3),\n"," ('푸하다', 3),\n"," ('빠알갛다', 3),\n"," ('메지다', 3),\n"," ('어스름하다', 3),\n"," ('싱그러우다', 3),\n"," ('옹골지다', 3),\n"," ('부산스럽다', 3),\n"," ('싸하다', 3),\n"," ('별다르다', 3),\n"," ('껌다', 3),\n"," ('농하다', 3),\n"," ('서스럼없다', 3),\n"," ('그렇잖다', 3),\n"," ('껄끄럽다', 3),\n"," ('쪼꼬마다', 3),\n"," ('똘똘하다', 3),\n"," ('붉디붉다', 3),\n"," ('징허다', 3),\n"," ('조옷다', 3),\n"," ('거깄다', 3),\n"," ('뚜껍다', 3),\n"," ('졸립다', 3),\n"," ('별나다', 3),\n"," ('집다', 3),\n"," ('게르다', 3),\n"," ('얼토당토않다', 3),\n"," ('감탄스럽다', 3),\n"," ('겸연쩍다', 3),\n"," ('마지못하다', 3),\n"," ('노하다', 3),\n"," ('조마조마하다', 3),\n"," ('시덥다', 2),\n"," ('해묵다', 2),\n"," ('예스럽다', 2),\n"," ('솔찮다', 2),\n"," ('가려우다', 2),\n"," ('호리호리하다', 2),\n"," ('허허롭다', 2),\n"," ('메뜨다', 2),\n"," ('짜르다', 2),\n"," ('곰살맞다', 2),\n"," ('우리하다', 2),\n"," ('너그러다', 2),\n"," ('맵짜다', 2),\n"," ('별스럽다', 2),\n"," ('고깝다', 2),\n"," ('느껍다', 2),\n"," ('능청스럽다', 2),\n"," ('여무지다', 2),\n"," ('한탄스럽다', 2),\n"," ('성가시다', 2),\n"," ('냉하다', 2),\n"," ('깜찍하다', 2),\n"," ('기나길다', 2),\n"," ('물씬하다', 2),\n"," ('나즈막하다', 2),\n"," ('버얼겋다', 2),\n"," ('까슬하다', 2),\n"," ('햐얗다', 2),\n"," ('살지다', 2),\n"," ('먹음직스럽다', 2),\n"," ('뼈지다', 2),\n"," ('자잔하다', 2),\n"," ('마침맞다', 2),\n"," ('하염없다', 2),\n"," ('뚱하다', 2),\n"," ('어덯다', 2),\n"," ('속상허다', 2),\n"," ('나아쁘다', 2),\n"," ('까리하다', 2),\n"," ('네모지다', 2),\n"," ('났다', 2),\n"," ('아리까리하다', 2),\n"," ('편ㅎ다', 2),\n"," ('아쉽잖다', 2),\n"," ('뼈져리다', 2),\n"," ('찹찹하다', 2),\n"," ('깐지다', 2),\n"," ('덩그렇다', 2),\n"," ('아랑곳없다', 2),\n"," ('물샐틈없다', 2),\n"," ('양지바르다', 2),\n"," ('채롭다', 2),\n"," ('뻑적지근하다', 2),\n"," ('철통같다', 2),\n"," ('ㅣㅆ다', 2),\n"," ('얌전하다', 2),\n"," ('깎아지르다', 2),\n"," ('검푸르다', 2),\n"," ('노리다', 2),\n"," ('조옿다', 2),\n"," ('큰일나다', 2),\n"," ('정하다', 2),\n"," ('걸다', 2),\n"," ('아름다웁다', 2),\n"," ('어긋맞다', 2),\n"," ('약삭빠르다', 2),\n"," ('쓰라리다', 2),\n"," ('낯뜨겁다', 2),\n"," ('참답다', 2),\n"," ('가냘프다', 2),\n"," ('금쪽같다', 2),\n"," ('한가롭다', 2),\n"," ('값비싸다', 2),\n"," ('굴곡지다', 2),\n"," ('궃다', 2),\n"," ('시건방지다', 2),\n"," ('마뜩찮다', 2),\n"," ('우숩다', 2),\n"," ('때맞다', 1),\n"," ('번거럽다', 1),\n"," ('쬐끄맣다', 1),\n"," ('앙징맞다', 1),\n"," ('검디검다', 1),\n"," ('빼나다', 1),\n"," ('마뜩다', 1),\n"," ('향그럽다', 1),\n"," ('해밝다', 1),\n"," ('깜쪽같다', 1),\n"," ('얄따랗다', 1),\n"," ('매마르다', 1),\n"," ('배불르다', 1),\n"," ('올차다', 1),\n"," ('어리숙하다', 1),\n"," ('간곳없다', 1),\n"," ('차디차다', 1),\n"," ('길둥글다', 1),\n"," ('가당찮다', 1),\n"," ('띵하다', 1),\n"," ('급허다', 1),\n"," ('턱없다', 1),\n"," ...]"]},"metadata":{},"execution_count":7}],"source":["# mecab_adj에서 각 단어가 몇 번 나오는지 세기\n","\n","from collections import Counter\n","\n","count = Counter(df_mecab_adj['mecab_adj'].str.split(expand=True).stack())\n","\n","count.most_common()"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"h3gFJV0TNoTE"},"outputs":[],"source":["# #mecab_adj_list의 단어 빈도수를 세고 1000번 이상 나오는 단어들을 삭제\n","\n","# from collections import Counter\n","\n","# mecab_adj_list = df_mecab_adj['mecab_adj'].tolist()\n","\n","# mecab_adj_list = [word for line in mecab_adj_list for word in line.split()]\n","\n","# count = Counter(mecab_adj_list)\n","\n","# # mecab_adj_list에서 1000번 이상 나오는 글자를 삭제\n","\n","# mecab_adj_list = [word for word in mecab_adj_list if count[word] < 1000]\n","\n","# mecab_adj_list"]},{"cell_type":"markdown","source":["# 바로 아래 코드 추가됨"],"metadata":{"id":"D_OibOwJSgXP"}},{"cell_type":"code","source":["# count에서 1000번 이상 나온 단어를 mecab_adj에서 삭제\n","\n","df_mecab_adj['mecab_adj'] = df_mecab_adj['mecab_adj'].apply(lambda x: ' '.join([word for word in x.split() if count[word] < 1000]))\n","\n","df_mecab_adj.head()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":206},"id":"r5CTFdUdSeQF","executionInfo":{"status":"ok","timestamp":1669623549740,"user_tz":-540,"elapsed":771,"user":{"displayName":"통신2조","userId":"05511036214781799110"}},"outputId":"94f8c493-891e-4a15-be8f-62578a67e078"},"execution_count":8,"outputs":[{"output_type":"execute_result","data":{"text/plain":["         keyword                                          mecab_adj\n","0          168계단  습하다 재미없다 뿌옇다 식다 궂다 인상깊다 우연찮다 무덥다 조그맣다 갑작스럽다 겉다...\n","1          25의용단  굵다 노랗다 귀하다 정겹다 곱다 빨갛다 헛되다 동그렇다 부끄럽다 인상깊다 굵다 노랗...\n","2       40계단 문화관  궂다 인상깊다 우연찮다 심심찮다 흔하다 덩그러다 굵다 빡세다 배고프다 환하다 깜다 ...\n","3  40계단 문화관광테마거리  궂다 인상깊다 우연찮다 심심찮다 싶다 매끄럽다 흔하다 덩그러다 덧없다 무덥다 달갑다...\n","4     60년전통 할매국밥  아쉬우다 무겁다 아쉬우다 실하다 가벼우다 습하다 실하다 스럽다 착하다 슴슴하다 두껍..."],"text/html":["\n","  <div id=\"df-9806de7f-5fb2-45f1-a856-e0025e4f69d2\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>keyword</th>\n","      <th>mecab_adj</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>168계단</td>\n","      <td>습하다 재미없다 뿌옇다 식다 궂다 인상깊다 우연찮다 무덥다 조그맣다 갑작스럽다 겉다...</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>25의용단</td>\n","      <td>굵다 노랗다 귀하다 정겹다 곱다 빨갛다 헛되다 동그렇다 부끄럽다 인상깊다 굵다 노랗...</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>40계단 문화관</td>\n","      <td>궂다 인상깊다 우연찮다 심심찮다 흔하다 덩그러다 굵다 빡세다 배고프다 환하다 깜다 ...</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>40계단 문화관광테마거리</td>\n","      <td>궂다 인상깊다 우연찮다 심심찮다 싶다 매끄럽다 흔하다 덩그러다 덧없다 무덥다 달갑다...</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>60년전통 할매국밥</td>\n","      <td>아쉬우다 무겁다 아쉬우다 실하다 가벼우다 습하다 실하다 스럽다 착하다 슴슴하다 두껍...</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-9806de7f-5fb2-45f1-a856-e0025e4f69d2')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-9806de7f-5fb2-45f1-a856-e0025e4f69d2 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-9806de7f-5fb2-45f1-a856-e0025e4f69d2');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":8}]},{"cell_type":"code","execution_count":9,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":206},"executionInfo":{"elapsed":294,"status":"ok","timestamp":1669623554572,"user":{"displayName":"통신2조","userId":"05511036214781799110"},"user_tz":-540},"id":"_fm_sehRPDSr","outputId":"735a7997-cf79-4b67-88cf-c4f4c1ea2d2d"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["         keyword                                          mecab_adj\n","0          168계단  습하다 재미없다 뿌옇다 식다 궂다 인상깊다 우연찮다 무덥다 조그맣다 갑작스럽다 겉다...\n","1          25의용단  굵다 노랗다 귀하다 정겹다 곱다 빨갛다 헛되다 동그렇다 부끄럽다 인상깊다 굵다 노랗...\n","2       40계단 문화관  궂다 인상깊다 우연찮다 심심찮다 흔하다 덩그러다 굵다 빡세다 배고프다 환하다 깜다 ...\n","3  40계단 문화관광테마거리  궂다 인상깊다 우연찮다 심심찮다 싶다 매끄럽다 흔하다 덩그러다 덧없다 무덥다 달갑다...\n","4     60년전통 할매국밥  아쉬우다 무겁다 아쉬우다 실하다 가벼우다 습하다 실하다 스럽다 착하다 슴슴하다 두껍..."],"text/html":["\n","  <div id=\"df-55539d6c-4609-417a-9daa-274c811eb8c6\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>keyword</th>\n","      <th>mecab_adj</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>168계단</td>\n","      <td>습하다 재미없다 뿌옇다 식다 궂다 인상깊다 우연찮다 무덥다 조그맣다 갑작스럽다 겉다...</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>25의용단</td>\n","      <td>굵다 노랗다 귀하다 정겹다 곱다 빨갛다 헛되다 동그렇다 부끄럽다 인상깊다 굵다 노랗...</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>40계단 문화관</td>\n","      <td>궂다 인상깊다 우연찮다 심심찮다 흔하다 덩그러다 굵다 빡세다 배고프다 환하다 깜다 ...</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>40계단 문화관광테마거리</td>\n","      <td>궂다 인상깊다 우연찮다 심심찮다 싶다 매끄럽다 흔하다 덩그러다 덧없다 무덥다 달갑다...</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>60년전통 할매국밥</td>\n","      <td>아쉬우다 무겁다 아쉬우다 실하다 가벼우다 습하다 실하다 스럽다 착하다 슴슴하다 두껍...</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-55539d6c-4609-417a-9daa-274c811eb8c6')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-55539d6c-4609-417a-9daa-274c811eb8c6 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-55539d6c-4609-417a-9daa-274c811eb8c6');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":9}],"source":["# mecab_adj에서 1글자인 단어를 삭제\n","\n","df_mecab_adj['mecab_adj'] = df_mecab_adj['mecab_adj'].apply(lambda x: ' '.join([word for word in x.split() if len(word) > 1]))\n","\n","df_mecab_adj.head()"]},{"cell_type":"code","execution_count":10,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":206},"executionInfo":{"elapsed":297,"status":"ok","timestamp":1669623566681,"user":{"displayName":"통신2조","userId":"05511036214781799110"},"user_tz":-540},"id":"GFrJj7ZVDxSE","outputId":"b0fcd756-aa5f-4140-a2be-0576378a318b"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["         keyword                                          mecab_adj\n","0          168계단  {인상깊다, 뿌옇다, 고되다, 조그맣다, 어마다, 재미없다, 흔하다, 궂다, 우연찮...\n","1          25의용단  {정겹다, 인상깊다, 곱다, 헛되다, 빨갛다, 동그렇다, 귀하다, 노랗다, 굵다, ...\n","2       40계단 문화관  {우습다, 인상깊다, 힘차다, 죠다, 흔하다, 배고프다, 궂다, 비좁다, 우연찮다,...\n","3  40계단 문화관광테마거리  {우습다, 인상깊다, 속상하다, 죠다, 흔하다, 배고프다, 궂다, 비좁다, 우연찮다...\n","4     60년전통 할매국밥  {스럽다, 더럽다, 척하다, 싱겁다, 흔하다, 질기다, 착하다, 슴슴하다, 벅차다,..."],"text/html":["\n","  <div id=\"df-c2275244-3929-44ba-ac44-942b196e6206\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>keyword</th>\n","      <th>mecab_adj</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>168계단</td>\n","      <td>{인상깊다, 뿌옇다, 고되다, 조그맣다, 어마다, 재미없다, 흔하다, 궂다, 우연찮...</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>25의용단</td>\n","      <td>{정겹다, 인상깊다, 곱다, 헛되다, 빨갛다, 동그렇다, 귀하다, 노랗다, 굵다, ...</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>40계단 문화관</td>\n","      <td>{우습다, 인상깊다, 힘차다, 죠다, 흔하다, 배고프다, 궂다, 비좁다, 우연찮다,...</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>40계단 문화관광테마거리</td>\n","      <td>{우습다, 인상깊다, 속상하다, 죠다, 흔하다, 배고프다, 궂다, 비좁다, 우연찮다...</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>60년전통 할매국밥</td>\n","      <td>{스럽다, 더럽다, 척하다, 싱겁다, 흔하다, 질기다, 착하다, 슴슴하다, 벅차다,...</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-c2275244-3929-44ba-ac44-942b196e6206')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-c2275244-3929-44ba-ac44-942b196e6206 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-c2275244-3929-44ba-ac44-942b196e6206');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":10}],"source":["# mecab_adj 컬럼에서 집합을 이용해 중복되는 단어를 삭제\n","\n","df_mecab_adj['mecab_adj'] = df_mecab_adj['mecab_adj'].apply(lambda x: set(x.split()))\n","\n","df_mecab_adj.head()"]},{"cell_type":"code","source":["# ,, 있을 때만 실행\n","\n","# df_mecab_adj['mecab_adj'] = df_mecab_adj['mecab_adj'].str.replace(',,', ',')\n","# df_mecab_adj.head()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":342},"id":"tdEEYWi3SqfY","executionInfo":{"status":"error","timestamp":1669623110020,"user_tz":-540,"elapsed":1143,"user":{"displayName":"통신2조","userId":"05511036214781799110"}},"outputId":"f5877b01-a05e-44de-d4c4-631bda8e88b5"},"execution_count":19,"outputs":[{"output_type":"error","ename":"AttributeError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mAttributeError\u001b[0m                            Traceback (most recent call last)","\u001b[0;32m<ipython-input-19-e089c16960d0>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mdf_mecab_adj\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'mecab_adj'\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mdf_mecab_adj\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'mecab_adj'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mstr\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mreplace\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m',,'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m','\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      2\u001b[0m \u001b[0mdf_mecab_adj\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mhead\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/pandas/core/generic.py\u001b[0m in \u001b[0;36m__getattr__\u001b[0;34m(self, name)\u001b[0m\n\u001b[1;32m   5485\u001b[0m         ):\n\u001b[1;32m   5486\u001b[0m             \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mname\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 5487\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0mobject\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m__getattribute__\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mname\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   5488\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   5489\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m__setattr__\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mname\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mstr\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mvalue\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m->\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/pandas/core/accessor.py\u001b[0m in \u001b[0;36m__get__\u001b[0;34m(self, obj, cls)\u001b[0m\n\u001b[1;32m    179\u001b[0m             \u001b[0;31m# we're accessing the attribute of the class, i.e., Dataset.geo\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    180\u001b[0m             \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_accessor\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 181\u001b[0;31m         \u001b[0maccessor_obj\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_accessor\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mobj\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    182\u001b[0m         \u001b[0;31m# Replace the property with the accessor object. Inspired by:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    183\u001b[0m         \u001b[0;31m# https://www.pydanny.com/cached-property.html\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/pandas/core/strings/accessor.py\u001b[0m in \u001b[0;36m__init__\u001b[0;34m(self, data)\u001b[0m\n\u001b[1;32m    166\u001b[0m         \u001b[0;32mfrom\u001b[0m \u001b[0mpandas\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcore\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0marrays\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mstring_\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mStringDtype\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    167\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 168\u001b[0;31m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_inferred_dtype\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_validate\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdata\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    169\u001b[0m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_is_categorical\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mis_categorical_dtype\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdata\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdtype\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    170\u001b[0m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_is_string\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0misinstance\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdata\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdtype\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mStringDtype\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/pandas/core/strings/accessor.py\u001b[0m in \u001b[0;36m_validate\u001b[0;34m(data)\u001b[0m\n\u001b[1;32m    223\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    224\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0minferred_dtype\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mallowed_types\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 225\u001b[0;31m             \u001b[0;32mraise\u001b[0m \u001b[0mAttributeError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"Can only use .str accessor with string values!\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    226\u001b[0m         \u001b[0;32mreturn\u001b[0m \u001b[0minferred_dtype\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    227\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mAttributeError\u001b[0m: Can only use .str accessor with string values!"]}]},{"cell_type":"markdown","source":["# 상단 셀 까지 추가"],"metadata":{"id":"Wh8_w3jkSvgk"}},{"cell_type":"code","execution_count":11,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":329,"status":"ok","timestamp":1669623596254,"user":{"displayName":"통신2조","userId":"05511036214781799110"},"user_tz":-540},"id":"xwR6yTuPIvEP","outputId":"4de5dcfe-fd02-428d-89bc-476fbadcda62"},"outputs":[{"output_type":"stream","name":"stdout","text":["1132\n","(566, 2)\n"]}],"source":["# { 를 [ 로 }를 ]로 바꾸기\n","\n","df_mecab_adj['mecab_adj'] = df_mecab_adj['mecab_adj'].apply(lambda x: str(x).replace('{', '[').replace('}', ']'))\n","\n","df_mecab_adj.head()\n","\n","print(df_mecab_adj.size)\n","print(df_mecab_adj.shape)"]},{"cell_type":"markdown","metadata":{"id":"RM9JIf23CeC8"},"source":["# 벡터화 준비"]},{"cell_type":"code","execution_count":12,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":5792,"status":"ok","timestamp":1669623606819,"user":{"displayName":"통신2조","userId":"05511036214781799110"},"user_tz":-540},"id":"lK72A4GpS7Ah","outputId":"87bc6f4c-4f97-4cc6-8987-1625e7cd57cd"},"outputs":[{"output_type":"stream","name":"stdout","text":["Looking in indexes: https://pypi.org/simple, https://us-python.pkg.dev/colab-wheels/public/simple/\n","Collecting konlpy\n","  Downloading konlpy-0.6.0-py2.py3-none-any.whl (19.4 MB)\n","\u001b[K     |████████████████████████████████| 19.4 MB 1.1 MB/s \n","\u001b[?25hCollecting JPype1>=0.7.0\n","  Downloading JPype1-1.4.1-cp37-cp37m-manylinux_2_12_x86_64.manylinux2010_x86_64.whl (465 kB)\n","\u001b[K     |████████████████████████████████| 465 kB 65.8 MB/s \n","\u001b[?25hRequirement already satisfied: lxml>=4.1.0 in /usr/local/lib/python3.7/dist-packages (from konlpy) (4.9.1)\n","Requirement already satisfied: numpy>=1.6 in /usr/local/lib/python3.7/dist-packages (from konlpy) (1.21.6)\n","Requirement already satisfied: packaging in /usr/local/lib/python3.7/dist-packages (from JPype1>=0.7.0->konlpy) (21.3)\n","Requirement already satisfied: typing-extensions in /usr/local/lib/python3.7/dist-packages (from JPype1>=0.7.0->konlpy) (4.1.1)\n","Requirement already satisfied: pyparsing!=3.0.5,>=2.0.2 in /usr/local/lib/python3.7/dist-packages (from packaging->JPype1>=0.7.0->konlpy) (3.0.9)\n","Installing collected packages: JPype1, konlpy\n","Successfully installed JPype1-1.4.1 konlpy-0.6.0\n"]}],"source":["# konlpy 설치\n","\n","!pip install konlpy"]},{"cell_type":"code","execution_count":13,"metadata":{"id":"lSY0j8bveayu","executionInfo":{"status":"ok","timestamp":1669623624627,"user_tz":-540,"elapsed":2783,"user":{"displayName":"통신2조","userId":"05511036214781799110"}}},"outputs":[],"source":["from konlpy.tag import Okt\n","okt = Okt()"]},{"cell_type":"code","execution_count":14,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":275,"status":"ok","timestamp":1669623627610,"user":{"displayName":"통신2조","userId":"05511036214781799110"},"user_tz":-540},"id":"rktYOYD0Uyrv","outputId":"9a8c1808-22b8-4ac1-b01e-b3bad35b6729"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["(566, 985)"]},"metadata":{},"execution_count":14}],"source":["# df_mecab_adj의 mecab_adj를 벡터화\n","\n","from sklearn.feature_extraction.text import TfidfVectorizer\n","\n","tfidf_vectorizer = TfidfVectorizer()\n","tfidf_matrix = tfidf_vectorizer.fit_transform(df_mecab_adj['mecab_adj'])\n","\n","tfidf_matrix.shape\n"]},{"cell_type":"markdown","metadata":{"id":"U62xc7LGHZj1"},"source":["# K-Means"]},{"cell_type":"code","execution_count":15,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":450},"executionInfo":{"elapsed":2355,"status":"error","timestamp":1669623639715,"user":{"displayName":"통신2조","userId":"05511036214781799110"},"user_tz":-540},"id":"T7hLAH8CQc7G","outputId":"d95fce43-4575-4d73-da14-1566e53ab441"},"outputs":[{"output_type":"error","ename":"KeyboardInterrupt","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mTypeError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/scipy/sparse/_index.py\u001b[0m in \u001b[0;36m_first_element_bool\u001b[0;34m(idx, max_dim)\u001b[0m\n\u001b[1;32m    346\u001b[0m     \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 347\u001b[0;31m         \u001b[0mfirst\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mnext\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0miter\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0midx\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    348\u001b[0m     \u001b[0;32mexcept\u001b[0m \u001b[0mTypeError\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mTypeError\u001b[0m: 'slice' object is not iterable","\nDuring handling of the above exception, another exception occurred:\n","\u001b[0;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)","\u001b[0;32m<ipython-input-15-a741a03111d6>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m     15\u001b[0m     )\n\u001b[1;32m     16\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 17\u001b[0;31m     \u001b[0mkm\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfit\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtfidf_matrix\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     18\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     19\u001b[0m     \u001b[0mdistortions\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mappend\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkm\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0minertia_\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/sklearn/cluster/_kmeans.py\u001b[0m in \u001b[0;36mfit\u001b[0;34m(self, X, y, sample_weight)\u001b[0m\n\u001b[1;32m   1178\u001b[0m             \u001b[0;31m# Initialize centers\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1179\u001b[0m             centers_init = self._init_centroids(\n\u001b[0;32m-> 1180\u001b[0;31m                 \u001b[0mX\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mx_squared_norms\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mx_squared_norms\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0minit\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0minit\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mrandom_state\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mrandom_state\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1181\u001b[0m             )\n\u001b[1;32m   1182\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mverbose\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/sklearn/cluster/_kmeans.py\u001b[0m in \u001b[0;36m_init_centroids\u001b[0;34m(self, X, x_squared_norms, init, random_state, init_size)\u001b[0m\n\u001b[1;32m   1092\u001b[0m                 \u001b[0mn_clusters\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1093\u001b[0m                 \u001b[0mrandom_state\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mrandom_state\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1094\u001b[0;31m                 \u001b[0mx_squared_norms\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mx_squared_norms\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1095\u001b[0m             )\n\u001b[1;32m   1096\u001b[0m         \u001b[0;32melif\u001b[0m \u001b[0misinstance\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0minit\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mstr\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mand\u001b[0m \u001b[0minit\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0;34m\"random\"\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/sklearn/cluster/_kmeans.py\u001b[0m in \u001b[0;36m_kmeans_plusplus\u001b[0;34m(X, n_clusters, x_squared_norms, random_state, n_local_trials)\u001b[0m\n\u001b[1;32m    217\u001b[0m         \u001b[0;31m# Compute distances to center candidates\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    218\u001b[0m         distance_to_candidates = _euclidean_distances(\n\u001b[0;32m--> 219\u001b[0;31m             \u001b[0mX\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mcandidate_ids\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mX\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mY_norm_squared\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mx_squared_norms\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0msquared\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mTrue\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    220\u001b[0m         )\n\u001b[1;32m    221\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/scipy/sparse/_index.py\u001b[0m in \u001b[0;36m__getitem__\u001b[0;34m(self, key)\u001b[0m\n\u001b[1;32m     31\u001b[0m     \"\"\"\n\u001b[1;32m     32\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m__getitem__\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mkey\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 33\u001b[0;31m         \u001b[0mrow\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcol\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_validate_indices\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     34\u001b[0m         \u001b[0;31m# Dispatch to specialized methods.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     35\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0misinstance\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mrow\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mINT_TYPES\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/scipy/sparse/_index.py\u001b[0m in \u001b[0;36m_validate_indices\u001b[0;34m(self, key)\u001b[0m\n\u001b[1;32m    127\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m_validate_indices\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mkey\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    128\u001b[0m         \u001b[0mM\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mN\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mshape\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 129\u001b[0;31m         \u001b[0mrow\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcol\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0m_unpack_index\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    130\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    131\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0misintlike\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mrow\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/scipy/sparse/_index.py\u001b[0m in \u001b[0;36m_unpack_index\u001b[0;34m(index)\u001b[0m\n\u001b[1;32m    282\u001b[0m             'are equal shapes.')\n\u001b[1;32m    283\u001b[0m     \u001b[0mbool_row\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0m_compatible_boolean_index\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mrow\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 284\u001b[0;31m     \u001b[0mbool_col\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0m_compatible_boolean_index\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mcol\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    285\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0mbool_row\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    286\u001b[0m         \u001b[0mrow\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0m_boolean_index_to_array\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mbool_row\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/scipy/sparse/_index.py\u001b[0m in \u001b[0;36m_compatible_boolean_index\u001b[0;34m(idx)\u001b[0m\n\u001b[1;32m    358\u001b[0m     \"\"\"\n\u001b[1;32m    359\u001b[0m     \u001b[0;31m# Presence of attribute `ndim` indicates a compatible array type.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 360\u001b[0;31m     \u001b[0;32mif\u001b[0m \u001b[0mhasattr\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0midx\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'ndim'\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mor\u001b[0m \u001b[0m_first_element_bool\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0midx\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    361\u001b[0m         \u001b[0;32mreturn\u001b[0m \u001b[0m_maybe_bool_ndarray\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0midx\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    362\u001b[0m     \u001b[0;32mreturn\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/scipy/sparse/_index.py\u001b[0m in \u001b[0;36m_first_element_bool\u001b[0;34m(idx, max_dim)\u001b[0m\n\u001b[1;32m    345\u001b[0m         \u001b[0;32mreturn\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    346\u001b[0m     \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 347\u001b[0;31m         \u001b[0mfirst\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mnext\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0miter\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0midx\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    348\u001b[0m     \u001b[0;32mexcept\u001b[0m \u001b[0mTypeError\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    349\u001b[0m         \u001b[0;32mreturn\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mKeyboardInterrupt\u001b[0m: "]}],"source":["# # K-means 클러스터링의 중심점이 움직이지 않을 때까지 fit 하여 최적의 클러스터 수 구하기\n","\n","# from sklearn.cluster import KMeans\n","\n","# distortions = []\n","\n","# for i in range(1, 14):\n","\n","#     km = KMeans(\n","\n","#         n_clusters=i, init='k-means++', n_init=10, max_iter=300,\n","\n","#         tol=1e-04, random_state=42\n","\n","#     )\n","\n","#     km.fit(tfidf_matrix)\n","\n","#     distortions.append(km.inertia_)\n","\n","# # elbow method를 이용해 최적의 클러스터 수 구하기\n","    \n","# import matplotlib.pyplot as plt\n","\n","# plt.plot(range(1, 14), distortions, marker='o')\n","\n","# plt.xlabel('Number of clusters')\n","\n","# plt.ylabel('Distortion')\n","\n","# plt.show()"]},{"cell_type":"code","execution_count":16,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":265},"executionInfo":{"elapsed":6920,"status":"ok","timestamp":1669623652241,"user":{"displayName":"통신2조","userId":"05511036214781799110"},"user_tz":-540},"id":"Vx12xiyzkV86","outputId":"0571e86b-dd6c-4b2c-f3ef-0256b7d7764a"},"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 1 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}}],"source":["# n_clusters= 클러스터 갯 수, init='k-means++', n_init= ???, max_iter= 최초 시작할 때 이동시킬 중심점, tol=1e-04, random_state= 난수\n","\n","\n","km = KMeans(\n","\n","    n_clusters=3, init='k-means++', n_init=563, max_iter=300, tol=1e-04, random_state=3\n","\n",")\n","\n","y_km = km.fit_predict(tfidf_matrix)\n","\n","# 클러스터링 결과를 시각화\n","\n","from sklearn.decomposition import PCA\n","\n","pca = PCA(n_components=2)\n","\n","pca.fit(tfidf_matrix.toarray())\n","\n","pca_data = pca.transform(tfidf_matrix.toarray())\n","\n","plt.scatter(pca_data[:, 0], pca_data[:, 1], c=y_km, s=50, cmap='viridis')\n","\n","# km.cluster_centers_ 표시\n","\n","centers = km.cluster_centers_\n","\n","plt.scatter(centers[:, 0], centers[:, 1], c='black', s=200, alpha=0.5)\n","\n","plt.show()\n","\n"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"MnJnpL7jRIYD"},"outputs":[],"source":["# 클러스터링 결과를 데이터프레임에 추가\n","\n","df_mecab_adj['cluster'] = y_km\n","\n","df_mecab_adj.head()\n","\n","# 클러스터링 결과를 csv 파일로 저장\n","\n","df_mecab_adj.to_csv('df_mecab_adj.csv', index=False)\n","\n","# 클러스터링 결과를 엑셀 파일로 저장\n","\n","df_mecab_adj.to_excel('df_mecab_adj.xlsx', index=False)"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":302,"status":"ok","timestamp":1669622095293,"user":{"displayName":"통신2조","userId":"05511036214781799110"},"user_tz":-540},"id":"Z8lE_5PPOznZ","outputId":"c3952093-c79e-4d26-de4f-e47676f10705"},"outputs":[{"data":{"text/plain":["array([[0.00062495, 0.0260593 , 0.05763165, ..., 0.00235774, 0.00064261,\n","        0.02335945],\n","       [0.0008603 , 0.03915042, 0.02539992, ..., 0.0138442 , 0.00497995,\n","        0.03935638],\n","       [0.        , 0.        , 0.04369132, ..., 0.00364155, 0.        ,\n","        0.01291467]])"]},"execution_count":54,"metadata":{},"output_type":"execute_result"}],"source":["# 중심점을 구하기\n","\n","km.cluster_centers_\n"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":299,"status":"ok","timestamp":1669621943458,"user":{"displayName":"통신2조","userId":"05511036214781799110"},"user_tz":-540},"id":"v4B65mVhN3dK","outputId":"f7c48f15-feb6-4842-a2d7-6e9a00f77efb"},"outputs":[{"name":"stdout","output_type":"stream","text":["Cluster 0: 그렇다 늦다 길다 르다 재밌다 예쁘다 아쉽다 쉽다 이쁘다 귀엽다\n","Cluster 1: 쩔다 손색없다 더럽다 동그랗다 그립다 쓸데없다 갑작스럽다 따갑다 희다 세차다\n","Cluster 2: 있다 좋다 같다 없다 많다 크다 맛있다 높다 넓다 작다\n"]},{"name":"stderr","output_type":"stream","text":["/usr/local/lib/python3.7/dist-packages/sklearn/utils/deprecation.py:87: FutureWarning: Function get_feature_names is deprecated; get_feature_names is deprecated in 1.0 and will be removed in 1.2. Please use get_feature_names_out instead.\n","  warnings.warn(msg, category=FutureWarning)\n"]}],"source":["# 각 클러스터의 중심 단어\n","\n","import numpy as np\n","\n","order_centroids = km.cluster_centers_.argsort()[:, ::-1]\n","\n","terms = tfidf_vectorizer.get_feature_names()\n","\n","for i in range(3):\n","\n","    print(\"Cluster %d:\" % i, end='')\n","\n","    for ind in order_centroids[i, :10]:\n","\n","        print(' %s' % terms[ind], end='')\n","\n","    print()"]},{"cell_type":"markdown","metadata":{"id":"s8GEV-YMJ4P7"},"source":["# 하단 무시"]},{"cell_type":"markdown","metadata":{"id":"LdNtOslVJdwV"},"source":["# K-Medroids"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":3983,"status":"ok","timestamp":1669620719398,"user":{"displayName":"통신2조","userId":"05511036214781799110"},"user_tz":-540},"id":"hJK8tJYdP3pZ","outputId":"c5eed926-c540-47ff-e299-bae3fe60a363"},"outputs":[{"name":"stdout","output_type":"stream","text":["Looking in indexes: https://pypi.org/simple, https://us-python.pkg.dev/colab-wheels/public/simple/\n","Collecting scikit-learn-extra\n","  Downloading scikit_learn_extra-0.2.0-cp37-cp37m-manylinux2010_x86_64.whl (1.7 MB)\n","\u001b[K     |████████████████████████████████| 1.7 MB 5.2 MB/s \n","\u001b[?25hRequirement already satisfied: numpy>=1.13.3 in /usr/local/lib/python3.7/dist-packages (from scikit-learn-extra) (1.21.6)\n","Requirement already satisfied: scipy>=0.19.1 in /usr/local/lib/python3.7/dist-packages (from scikit-learn-extra) (1.7.3)\n","Requirement already satisfied: scikit-learn>=0.23.0 in /usr/local/lib/python3.7/dist-packages (from scikit-learn-extra) (1.0.2)\n","Requirement already satisfied: joblib>=0.11 in /usr/local/lib/python3.7/dist-packages (from scikit-learn>=0.23.0->scikit-learn-extra) (1.2.0)\n","Requirement already satisfied: threadpoolctl>=2.0.0 in /usr/local/lib/python3.7/dist-packages (from scikit-learn>=0.23.0->scikit-learn-extra) (3.1.0)\n","Installing collected packages: scikit-learn-extra\n","Successfully installed scikit-learn-extra-0.2.0\n"]}],"source":["! pip install scikit-learn-extra"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":278,"status":"ok","timestamp":1669620781193,"user":{"displayName":"통신2조","userId":"05511036214781799110"},"user_tz":-540},"id":"ON7YFVOKPn_N","outputId":"86a03f55-c2ae-4593-d710-79a72fa980af"},"outputs":[{"data":{"text/plain":["array([0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 1, 1, 0, 1,\n","       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0,\n","       0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0,\n","       1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,\n","       0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0,\n","       0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,\n","       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0,\n","       0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n","       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0,\n","       0, 0, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n","       1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1,\n","       1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n","       0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0,\n","       0, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0,\n","       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1,\n","       1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,\n","       0, 1, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0,\n","       0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,\n","       0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 1,\n","       0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,\n","       0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0,\n","       0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0,\n","       0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1,\n","       1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0,\n","       1, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1,\n","       1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])"]},"execution_count":33,"metadata":{},"output_type":"execute_result"}],"source":["# 위 df_mecab_adj의 mecab_adj를 KMedoids로 클러스터링\n","\n","from sklearn_extra.cluster import KMedoids\n","\n","kmedoids = KMedoids(n_clusters=2, random_state=0).fit(tfidf_matrix)\n","\n","kmedoids.labels_\n"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":265},"executionInfo":{"elapsed":946,"status":"ok","timestamp":1669620785601,"user":{"displayName":"통신2조","userId":"05511036214781799110"},"user_tz":-540},"id":"eGSxS90-Pn_N","outputId":"a6e339a2-5c2d-4852-fd56-cdaa375921f2"},"outputs":[{"data":{"image/png":"","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"needs_background":"light"},"output_type":"display_data"}],"source":["# 위 결과를 시각화\n","\n","import matplotlib.pyplot as plt\n","\n","from sklearn.decomposition import PCA\n","\n","pca = PCA(n_components=2)\n","\n","pca.fit(tfidf_matrix.toarray())\n","\n","pca_data = pca.transform(tfidf_matrix.toarray())\n","\n","plt.scatter(pca_data[:, 0], pca_data[:, 1], c=kmedoids.labels_, alpha=0.5)\n","\n","plt.show()"]}],"metadata":{"colab":{"provenance":[{"file_id":"1JamxXmxW43Y1mHEAx6W3dByN9pKfUhLy","timestamp":1669622749390}]},"kernelspec":{"display_name":"Python 3","name":"python3"},"language_info":{"name":"python"}},"nbformat":4,"nbformat_minor":0}